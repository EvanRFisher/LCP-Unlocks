{"version":3,"sources":["icons/key.svg","logo.svg","icons/crafting.svg","App.js","reportWebVitals.js","index.js"],"names":["SelectModeButton","require","React","Component","className","onClick","this","props","src","iconInfo","icon","alt","iconClass","fill","label","ActivePage","children","return","UnlockScreen","state","selectedFile","fileLoaded","filedata","active_keys","e","console","log","target","files","setState","type","onChange","onChangeFile","App","mode","filling","keyIcon","mergeIcon","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAe,GCAA,IDAA,IAA0B,iCEA1B,MAA0B,qC,qBCuBnCA,GAjBMC,EAAQ,IAOFC,IAAMC,U,4JAWtB,WACE,OAAQ,sBAAKC,UAAU,mBAAmBC,QAASC,KAAKC,MAAMF,QAAtD,UACN,qBAAKG,IAAKF,KAAKC,MAAME,SAASC,KAAMC,IAAKL,KAAKC,MAAME,SAASE,IAAKP,UAAWE,KAAKC,MAAME,SAASG,UAAWC,KAAK,YACjH,mBAAGT,UAAU,sBAAb,SAAoCE,KAAKC,MAAMO,e,GAJtBZ,IAAMC,YAS/BY,E,4JACJ,WACE,OAAQ,gCACLT,KAAKC,MAAMS,SACZ,qBAAKZ,UAAU,sBAAsBC,QAASC,KAAKC,MAAMU,OAAzD,SAAiE,mBAAGb,UAAU,kBAAb,6B,GAJ9CF,IAAMC,WAUzBe,E,kDAgCJ,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAM,CAACC,aAAa,KACbC,YAAW,EACXC,SAAS,KACTC,YAAY,IALR,E,gDAQlB,SAAaC,GACTC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBtB,KAAKuB,SAAS,CAACT,aAAaI,EAAEG,OAAOC,MAAM,GAAGP,YAAW,M,oBAG7D,WACE,OAAQ,8BACN,+BACA,uBAAOS,KAAK,OAAOC,SAAUzB,KAAK0B,uB,GAhDb9B,IAAMC,WA8GlB8B,E,kDAtDb,WAAY1B,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAM,CAACe,KAAK,aAFD,E,0CAMlB,WAAS,IAAD,OACFC,EAAU,KACd,OAAQ7B,KAAKa,MAAMe,MACjB,IAAK,YACHC,EAAW,cAAC,EAAD,CAAYlB,OAAQ,kBAAM,EAAKY,SAAS,CAACK,KAAK,eAA9C,SACP,cAAC,EAAD,MAEJ,MACF,IAAK,aACHC,EAAW,cAAC,EAAD,CAAYlB,OAAQ,kBAAM,EAAKY,SAAS,CAACK,KAAK,iBAG3D,MACA,IAAK,YACL,QACEC,EAAW,sBAAK/B,UAAU,cAAf,UACP,cAAC,EAAD,CAAkBK,SAAU,CAACC,KAAK0B,EAAWzB,IAAI,GAAIC,UAAU,YAAaE,MAAM,iBAAiBT,QAAS,kBAAM,EAAKwB,SAAS,CAACK,KAAK,iBACtI,cAAC,EAAD,CAAkBzB,SAAU,CAACC,KAAK2B,EAAW1B,IAAI,GAAIC,UAAU,cAAeE,MAAM,YAAYT,QAAS,kBAAM,EAAKwB,SAAS,CAACK,KAAK,qBAI3I,OAAQ,sBAAK9B,UAAU,MAAf,UACN,qBAAKA,UAAU,UAAf,SAA0B+B,IAC1B,iCAAQ,oBAAG/B,UAAU,YAAb,mIAA+I,mBAAGkC,KAAK,iBAAR,wC,GA9B3IpC,IAAMC,WCrFToC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca293bfe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/key.2f16108f.svg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/crafting.ee80224b.svg\";","import logo from './logo.svg';\nimport keyIcon from './icons/key.svg';\nimport mergeIcon from './icons/crafting.svg';\nimport React  from 'react';\nimport * as fs from 'fs';\nimport './App.css';\nvar JSZip = require(\"jszip\");\n\n/*\n2 Modes:\n1.\n*/\n\nclass Top extends React.Component {\n  render(){\n    return (\n      <div className=\"header-back\">\n      <p className=\"header-text\">LCP Unlocks</p>\n      </div>\n    );\n  }\n}\n\nclass SelectModeButton extends React.Component {\n  render(){\n    return (<div className=\"selectable-inset\" onClick={this.props.onClick}>\n      <img src={this.props.iconInfo.icon} alt={this.props.iconInfo.alt} className={this.props.iconInfo.iconClass} fill=\"#FF00FF\"/>\n      <p className=\"select-button-label\">{this.props.label}</p>\n    </div>);\n  }\n}\n\nclass ActivePage extends React.Component {\n  render(){\n    return (<div>\n      {this.props.children}\n      <div className=\"floating-return-btn\" onClick={this.props.return}><p className=\"return-btn-text\">Return</p></div>\n      </div>\n    );\n  }\n}\n\nclass UnlockScreen extends React.Component {\n  /*Steps:\n  When the file in input:\n  1. Open up the LCP Manifest and display all the active codes.\n  2. Open the file containing the unlockables (if present) and load from JSON.\n  2. Unlock the password box.\n  When the code is input:\n  1. If code is already present in the manifest, do nothing except notify the user. Otherwise, continue.\n  2. Look up the code in the unlockables object.\n  3. For each entry in ^ array:\n    -> Load the given file.\n    -> For each entry in the password list:\n      -> If the id is already present in the file, replace it.\n      -> Otherwise, add it to the end of the file (but don't bother checking it in future checks.\n  4. Save the modified files to the zip.\n  5. Offer the zip to the player\n\n  Option: keep the files loaded & allow the player to keep entering codes until they hit an 'export' button.\n  */\n  /*TODO: Swap fine from\n\n  [{key:},\n   {key:},\n    ...]\n\n  to\n\n  {\"key1\":[{\"file\":\"\",entries:[{thing1},{thing2}...]},\n          {\"file\":\"\",entries:[{thing1},{thing2}...]},\n          ...]\n   \"key2\":[...]\n  }*/\n  constructor(props){\n    super(props);\n    this.state={selectedFile:null,\n                fileLoaded:false,\n                filedata:null,\n                active_keys:[]};\n  }\n\n  onChangeFile(e){\n      console.log(e.target.files);\n      this.setState({selectedFile:e.target.files[0],fileLoaded:false});\n    }\n\n  render(){\n    return (<div>\n      <form>\n      <input type=\"file\" onChange={this.onChangeFile} />\n      </form>\n      </div>);\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={mode:\"selecting\"};\n  }\n\n\n  render(){\n    var filling = null;\n    switch (this.state.mode) {\n      case \"unlocking\":\n        filling = (<ActivePage return={() => this.setState({mode:\"selecting\"})}>\n            <UnlockScreen />\n          </ActivePage>);\n        break;\n      case \"augmenting\":\n        filling = (<ActivePage return={() => this.setState({mode:\"selecting\"})}>\n\n          </ActivePage>);\n      break;\n      case \"selecting\":/*One button per state.*/\n      default:\n        filling = (<div className=\"ModeButtons\">\n            <SelectModeButton iconInfo={{icon:keyIcon,   alt:\"\", iconClass:\"key-logo\"}} label=\"Unlock Content\" onClick={() => this.setState({mode:\"unlocking\"})}/>\n            <SelectModeButton iconInfo={{icon:mergeIcon, alt:\"\", iconClass:\"craft-logo\"}} label=\"Patch LCP\" onClick={() => this.setState({mode:\"augmenting\"})}/>\n          </div>);\n    };\n\n    return (<div className=\"App\">\n      <div className=\"filling\">{filling}</div>\n      <footer><p className=\"attr-text\">The \"Key\" and \"Crafting\" icons by sbed and Delapouite respectively are licensed under CC BY 3.0 and were sourced from <a href=\"game-icons.net\">game-icons.net</a></p></footer>\n    </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}